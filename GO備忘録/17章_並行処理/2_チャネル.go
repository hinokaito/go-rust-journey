package main

import "fmt"

/*
チャネルは、ゴルーチン間でデータの送受信を行うためのパイプです。
これにより、複数のゴルーチンが安全に通信し、同期を取ることができます。

チャネルの操作:
・作成: ch := make(chan データ型)
・送信: ch <- 値 (チャネルに値を送る)
・受信: 値 := <-ch (チャネルから値を受け取る)

最重要！チャネルはブロックする
チャネルの最も重要な性質は、送受信がブロックすることです。
・あるゴルーチンがチャネルに値を送信(<-)しようとすると、
　他のゴルーチンがそのチャネルから受信(<-)の準備ができるまで、送信側のゴルーチンはそこで停止します。

・逆に、チャネルから受信(<-)しようとすると、
　他のゴルーチンがそのチャネルに値を送信(<-)するまで、受信側のゴルーチンはそこで停止します。

この「待機」の仕組みが、time.Sleepのような不可実な方法を使わずに、ゴルーチンを完璧に同期させる鍵となります。
*/

// 1_ゴルーチン.goで発生した問題を、チャネルを使って正しく同期させてみましょう！

// メッセージをチャネルに送信する関数
// chan string は 「string型をやり取りするチャネル」という意味
func sayHello(c chan string) {
	message := "こんにちは！(from greet)"
	// 文字列をチャネルに送信する
	c <- message
}

func main() {
	// string型のチャネルを作成
	ch := make(chan string)

	// sayHello関数をゴルーチンとして開始
	// チャネルを引数として渡す
	go sayHello(ch)

	// チャネルから値を受信する
	// sayHelloゴルーチンが値を送信するまで、main関数はここで待機(ブロック)する
	receivedMessage := <-ch

	fmt.Println(receivedMessage) // 受信したメッセージ表示

	fmt.Println("さようなら(from main)")
}
