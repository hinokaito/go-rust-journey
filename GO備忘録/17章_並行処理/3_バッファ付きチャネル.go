package main

import "fmt"

/*
1.バッファ付きチャネルとは
これまでにつかってきたチャネルは非バッファチャネルです。
送信者と受信者が一対一で出会うまで、お互いを待ち合わせる(ブロックする)タイプでした。

バッファ付きチャネルは、チャネル内に**決まった数の値をためて置けるキュー(バッファ)**を持つチャネルです。


2.特徴
・送信: バッファに空きがある限り、送信側はチャネルに入れて、待たずに(ブロックせずに)すぐ次の処理へ進めます
	　　バッファが満杯のときだけ、空きができるまでブロックします。

・受信: バッファに値が入っている限り、受信者は値をすぐに受け取れます。
		バッファが空きのときだけ、値が送られてくるまでブロックします。


3.どういうときに使うの？
送信側と受信側の処理速度が違う場合に、処理の流れをスムーズにする緩衝材として機能します。
例えば、送信側が一度に大量のタスクを生成し、受信側がそれを少しずつ処理していくような場面で有効です。
*/

// コード例
func main() {
	// 容量が2つの、int型バッファ付きチャネルを作成
	ch := make(chan int, 2)

	// バッファに空きがあるので、ブロックしない
	ch <- 1
	fmt.Println("1を送信しました")
	ch <- 2
	fmt.Println("2を送信しました")

	// これ以上送信しようとすると、バッファが満杯なのでブロックする
	// ch <- 3 //この行のコメントを外すと、誰も受信しないためデッドロックになる

	// バッファから値を受信する
	fmt.Println("受信:", <-ch)
	fmt.Println("受信:", <-ch)
}
