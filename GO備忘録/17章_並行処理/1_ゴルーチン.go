package main

import "fmt"

/*
いよいよGo言語の最大の特徴である並行処理を学びます！
その前に並行処理について学びましょう。
まず、「並行」と「並列」の違いを簡単に理解しましょう
・並行(Concurrency): 複数のタスクを切り替えながら進めること。1人のシェフがパスタを茹でながらソースを作り、サラダの準備をするようなイメージ
・並列(Parallelism): 複数のタスクを物理的に同時に進めること。複数のシェフが、それぞれ別のコンロで同時に調理するイメージ

Goは、この「並列処理」を驚くほど簡単に書けるように設計されています。
そして、実行するコンピュータに複数CPUコアがあれば、Goのランタイムが自動的に並行処理を「並列」に実行してくれます。
*/

/*ゴルーチン(Goroutine) - 超軽量な働き手
ゴルーチンとは、Goのランタイムによって管理される非常に軽量なスレッドです。
OSが管理する通常のスレッドよりも、1つのプログラム内で何千、何万というゴルーチンを簡単に起動できます。

ゴルーチンを開始するのは、信じられないほど簡単です。
関数の呼び出しの前に「go」キーワードを付けるだけです。

go 何かの関数()

これだけで、この関数は新しいゴルーチンとして実行されます。

注意点
goをつかって関数を呼び出すと、その関数はバックグラウンドで独立して動き始めます。
そして、呼び出し元の関数(例えばmain関数)は、ゴルーチンの終了を待たずに先に進んでしまいます。
*/

// コード例(うまくいかない例)

func sayHello() {
	fmt.Println("こんにちは！(from sayHello)")
}

func main() {
	go sayHello() // 新しいゴルーチンでsayHello関数を開始

	fmt.Println("さようなら(from main)")
	// main関数はゴルーチンの終了を待たずに、ここで終了してしまう。
	// そのため、「こんにちは！」が表示される前にプログラムが終わる可能性が高い
}

// この問題を解決し、ゴルーチン同士が協調して動作するために「チャネル」を使います。次のファイルで学びましょう！
