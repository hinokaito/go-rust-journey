Go言語の思想を体現する非常に重要で強力な概念、インターフェイス(interface)について、この章で学習していきましょう
インターフェースを理解することで、コードの柔軟性、拡張性、保守性が劇的に向上します。


インターフェースとは、「実装すべきメソッドのリスト」を定義した型です。
「契約書」や「仕様書」のようなもので、「このインターフェースを満たすためには、これとこれのメソッドを必ず持っていなければなりません」というルールを定めます。

ポイント:
    ・インターフェースは、具体的な処理内容（メソッドの中身）を書きません。メソッドの名前、引数、戻り値の型だけを定義します。
    ・どんな構造体でも、インターフェースで定められたメソッドを全て実装すれば、そのインターフェースの型として扱われる資格を得ます。

なぜインターフェースを使うのか？
    ・疎結合な設計: プログラムの各部分が、具体的な構造体の型に依存するのではなく、「振る舞いの契約（インターフェース）」に依存するようになります。
    　これにより、一部の部品を交換したり、新しい部品を追加したりするのが非常に簡単になります。

    ・ポリモーフィズム (多態性) の実現: 「見た目（型）は違うけど、同じように扱える」という状態を作り出せます。
    　例えば、「Area()という面積を計算するメソッドさえ持っていれば、それがCircleだろうとRectangleだろうと、同じ関数で面積計算ができる」といった柔軟なコードが書けます。