package main

import "fmt"

/*
いよいよ関数です。
関数とは、特定のタスクを実行するための一連の処理を1つにまとめたものです。
「材料(引数)」を受け取り、「レシピ(処理内容)」に従って調理し、「完成した料理(戻り値)」を返す、というイメージです。


使わなくても多くの場合同じように実装可能ですが、なぜ関数を使うのでしょうか？

・再利用性: 同じ処理を何度も書く必要がなくなり、同じ関数を呼び出すだけで済む

・整理整頓: プログラムを機能ごとに小さな部品に分割することで、コードが読みやすく、理解しやすくなる

・メンテナンス性: 修正点が発見しやすく、修正が必要な場合、その関数の中だけをなおせばよいので、修正が楽になります。
*/

/*基本的な関数の構文
func 関数名(引数1 型, 引数2 型, ...) 戻り値の型 {
	処理
	return 戻り値
}*/

// add関数を定義
// xとyという2つのint型の引数を受け取り、int型の戻り値を返す
func add(x int, y int) int {
	sum := x + y
	return sum
}

// 引数の型が同じ場合は、最後の引数にだけ型を書けば省略できる
// func add(x, y int) int { ... }

/*
・func: 関数を定義するためのキーワード
・関数名: 関数の名前。処理内容がわかるように名前を付ける
・引数: 関数が受け取るデータ。不要な場合は()の中身は空にします。名前は自由です。
・戻り値の型: 関数が返すデータの型です。何も返さない場合は省略します
・return: 関数から値を返すためのキーワード
*/

//　呼び出してみましょう
func main() {
	// add関数を呼び出し、戻り値を変数resultに格納
	result := add(10, 25)
	fmt.Println("合計:", result) // 合計: 35

	result = add(20, 30)
	fmt.Println("合計:", result) // 合計: 50
}
