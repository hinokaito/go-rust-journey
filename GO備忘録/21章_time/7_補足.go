package main

import (
	"fmt"
	"time"
)

// モノトニッククロック vs ウォールクロック

/*timeライブラリが内部で持つ重要な概念に、「モノトニッククロック」と「ウォールロック」の区別があります。

・モノトニッククロック: システムが起動してからの経過時間を単調増加で計測する時計です。NTPによる時刻調整の影響を受けません。

・ウォールロック: 普段目にする「壁掛け時計」の時刻です。システムのNTPクライアントが時刻を同期すると、
　　　　　　　　　時間が過去に巻き戻ったり、未来へジャンプしたりすることがあります。time.Now()やt.Format()が返すのはこちらの時刻です。

time.Sub()やtime.Since()、time.Until()といった経過時間を計測する関数は、内部的にこのモノトニッククロックを利用します。
これにより、システムの時刻が変更されても、経過時間の計測が不正確になる(例: マイナスの経過時間になる)ことを防いでくれます。
*/

func main() {
	// ウォールクロックが変更されても、経過時間の計測は正確な例
	start := time.Now()
	// ここで、手動やNTPでシステムの時刻を1分間巻き戻したと仮定する
	// ... time passes ...
	end := time.Now()

	// もしウォールクロックだけえで計算すると、経過時間がマイナスになる可能性がある
	// しかし、Goのtime.Subはモノトニッククロックを使うため、正しく経過時間を計算できる
	elapsed := end.Sub(start)     // or time.Since(start)
	fmt.Println("経過時間:", elapsed) // 正しい経過時間が表示される
}

// この仕組みのおかげで、開発者は意識せずとも、Goで信頼性の高い時間計測ができます。
