/*1.ジェネリクスとは？
ジェネリクスは、型をパラメータとして受け取る関数や型を定義できる機能です。
これにより、さまざまな型に対して同じ処理を行いたい場合に、コードの重複をなくし、型安全性を高めることができます。
2022年3月にリリースされた、Go 1.18で導入されました。非常に強力な機能です。
*/

/*2.なぜ必要？
ジェネリクスが登場する前、Goで「いろんな型に使える関数」を作ろうとすると、主に2つの方法があり、それぞれに課題がありました。

1. interface{}(現在のany)を使う方法
interface{}はどんな型でも受け入れられる便利な方ですが、中身の型情報が失われてしまいます。
そのため、関数内で具体的な操作(例えば足し算)をするには、型アサーション(v.(int))のような型チェックと変換が必要でした。
これは手間がかかる上に、実行時に型が違うとパニックを起こす危険性がありました。

2. 型ごとに同じ関数をたくさん作る方法
int用の関数、float64用の関数、string用の関数...というように、型ごとにロジックが全く同じ関数をコピーして作っていました。
これはコードの重複が多くなり、メンテナンスが大変でした。

ジェネリクスは、これらの問題をコンパイル時の型チェックを維持したまま、スマートに解決してくれます。
*/

/*3.ジェネリクスの基本構文
ジェネリクスを理解するうえで重要な要素は「型パラメータ」と「型制約」です。

func FunctionName[T TypeConstraint](argument T) {
	// ...
}

・型パラメータ(Type Parameter)
	・[T ...]の部分で、Tが型パラメータです。慣習的にTがよく使われますが、VやKなど分かりやすい名前ならなんでもかまいません。
	・これは「これからTという名前を『仮の型』として使います」という宣言です。

・型制約(Type Constraint)
	・TypeConstraintの部分で、型パラメータTが満たすべき条件を定義します
	・「どんな型でもOK」なのか、「比較できる型だけ」なのか、「足し算ができる方だけ」なのか、といった制約を指定します。
*/