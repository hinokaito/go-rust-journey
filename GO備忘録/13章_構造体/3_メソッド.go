package main

import "fmt"

/*
メソッドとは、特定の型(構造体など)に関連付けられた関数のことです。これにより、データ(構造体)と、
そのデータを操作する処理(メソッド)をセットで扱うことができ、オブジェクト指向プログラミングのような書き方が可能になります
*/

/*構文
func (レシーバー名 レシーバーの型) メソッド名(引数 型) 戻り値 {
	処理
}
レシーバーとは、funcキーワードとメソッド名の間にある( ... )の部分。どの構造体のためのメソッド化を定義します。
*/

/*#最重要 値レシーバー VS ポインタレシーバー
メソッドを定義する際、レシーバーを「値」にするか、「ポインタ」にするかで挙動が大きく変わります。

・値レシーバー(u Userなど):
	・メソッドは構造体のコピーを受け取る
	・メソッド内でフィールドの値を変更しても、元の構造体には影響しません
	・データを変更しない読み取り専用のメソッドで使います

・ポインタレシーバー(u *Userなど):
	・メソッドは構造体へのポインタ(参照)を受け取ります
	・メソッド内でフィールド値を変更すると、元の構造体の値が変更されます。
	・データを変更する必要があるメソッドで使います。こちらのほうが一般的に使われます。
*/

// コード例
type User struct {
	Name string
	Age  int
}

// 値レシーバーのメソッド(元の値は変わらない)
func (u User) greet() {
	u.Name = "Mr." + u.Name // コピーを変更しているだけ
	fmt.Printf("こんにちは、%sさん!\n", u.Name)
}

// ポインタレシーバーのメソッド(元の値が変わる)
func (u *User) celeblateBirthday() {
	u.Age++ // 元の構造体のAgeをインクリメント
	fmt.Printf("誕生日おめでとう、%sさん! あなたは%d歳になりました!\n", u.Name, u.Age)
}

func main() {
	user := User{Name: "Alice", Age: 30}
	fmt.Println("---メソッド呼び出し前---")
	fmt.Println(user)

	fmt.Println("---値レシーバーのメソッド呼び出し---")
	user.greet()                            // 元の値は変わらない値レシーバー
	fmt.Println("greet()呼び出し後のuser:", user) // Nameは変わってない！

	fmt.Println("---ポインタレシーバーのメソッド呼び出し---")
	user.celeblateBirthday()                            // 元の値が変わるポインタレシーバー
	fmt.Println("celeblateBirthday()呼び出し後のuser:", user) // Ageは変わってる！
}

// 構造体とメソッドを使いこなすことでプログラムの部品化がさらに進み、大規模なアプリでも見通しよく開発できます。
